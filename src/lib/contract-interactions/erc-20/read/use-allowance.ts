// ------------------------------------------------
// This file is auto-generated by scripts/createReadsERC20.js
// ------------------------------------------------

import type { UseReadContractParameters } from "wagmi";
import { useReadContract } from "wagmi";
import { isUndefined } from "lodash-es";
import { TokenABI } from "@/lib/abi/token";
import type { AbiInputsToParams } from "@/lib/contract-interactions/utils";
import {
  paramsToArray,
  extractAbiFunction,
} from "@/lib/contract-interactions/utils";
import type { ExtractAbiFunction } from "abitype";
import { readContractQueryOptions } from "wagmi/query";
import { config } from "@/wagmi/config";
import { queryClient } from "@/lib/react-query";

type Fn = ExtractAbiFunction<typeof TokenABI, "allowance">;
const abiFunction = extractAbiFunction(TokenABI, "allowance");

export const getAllowanceQueryOptions = (
  tokenAddress: `0x${string}`,
  params: AbiInputsToParams<Fn["inputs"]>,
) =>
  readContractQueryOptions(config, {
    abi: TokenABI,
    address: tokenAddress,
    functionName: "allowance",
    args: paramsToArray({ params, abiFunction }),
  });

type QueryOptions = UseReadContractParameters<
  typeof TokenABI,
  "allowance"
>["query"];

export const fetchAllowance = (
  tokenAddress: `0x${string}`,
  params: AbiInputsToParams<Fn["inputs"]>,
) => queryClient.fetchQuery(getAllowanceQueryOptions(tokenAddress, params));

export const useAllowance = (
  {
    tokenAddress,
    ...params
  }: AbiInputsToParams<Fn["inputs"]> & { tokenAddress?: `0x${string}` },
  options: QueryOptions = { enabled: true },
) => {
  const args = paramsToArray({ params, abiFunction });

  return useReadContract({
    abi: TokenABI,
    address: tokenAddress,
    functionName: "allowance",
    args,
    query: {
      ...options,
      enabled:
        tokenAddress &&
        options?.enabled &&
        args.every((arg) => !isUndefined(arg)),
    },
  });
};

// ------------------------------------------------
// This file is auto-generated by scripts/createReadsERC20.js
// ------------------------------------------------
